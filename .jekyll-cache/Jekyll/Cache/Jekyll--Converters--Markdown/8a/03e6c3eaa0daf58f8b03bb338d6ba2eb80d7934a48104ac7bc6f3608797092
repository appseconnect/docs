I"˜<p>APPSeCONNECT Mapping Types are given below:</p>

<p><strong>1. Hard Coded Mapping</strong> -  Hardcoded mapping is implemented when it is required that a field of the destination schema bears a 
    constant value such that the value of the field does not change with every transformation carried out.</p>

<p>AN EXAMPLE: If a customer wants every business partner, added from the source to the destination application to come with a flag of constant value, 
then he can deploy hard-coded mapping.</p>

<p><strong>2. Field to Field Mapping</strong>- is required when your business demand mapping a field of the destination schema to directly fetch 
   its value from the source schema.</p>

<p>AN EXAMPLE: If you want the <code class="language-plaintext highlighter-rouge">Customer</code> schema of SAP B1 to fetch the value of the field <code class="language-plaintext highlighter-rouge">Country</code> directly from the country field of the source schema, 
you can map the <code class="language-plaintext highlighter-rouge">country</code> field of both the schemas. <br />
<img src="/staticfiles/Transformation/media/field-field-mapping.png" alt="field-field-mapping" />     <br />
For this example, let us say, you wish to map the destination field <code class="language-plaintext highlighter-rouge">email</code> with the source field <code class="language-plaintext highlighter-rouge">email</code> of the schema <code class="language-plaintext highlighter-rouge">customer</code>. 
These fields exist as nodes in the corresponding XML document. Then you can directly map the fields together, by providing the name 
of the source field in the destination field. However if you wish to map the field <code class="language-plaintext highlighter-rouge">PIN</code> of the destination field, you cannot access the node directly. 
The node <code class="language-plaintext highlighter-rouge">PIN</code> exists as a child node of the parent node <code class="language-plaintext highlighter-rouge">shipping</code> and <code class="language-plaintext highlighter-rouge">billing</code> which in turn are child nodes to the node 
<code class="language-plaintext highlighter-rouge">address</code>.</p>

<p>1) To access the node <code class="language-plaintext highlighter-rouge">PIN</code>, we provide the entire up to the node so that it can be accessed.
2) To access the node <code class="language-plaintext highlighter-rouge">PIN</code> of the node <code class="language-plaintext highlighter-rouge">billing</code>, we provide the following XPATH: address/billing/PIN</p>

<ul>
  <li>Direct field mapping</li>
  <li>Field mapping via XPATH</li>
</ul>

<p><strong>3. Choose-when Mapping -</strong> Analogous to <code class="language-plaintext highlighter-rouge">if-then-else</code> statement, it is deployed when you want the value of a field 
of the destination schema to be conditionally dependent on the value of the corresponding field of the source schema. 
In other words, the value of the destination field would depend on the source field, such that for every different value
 of the source field, there is a corresponding value for the destination field.</p>

<p>Take the analogy of the <code class="language-plaintext highlighter-rouge">if-then-else</code> statement to understand this.
Say, you want to set up the value of a variable <code class="language-plaintext highlighter-rouge">x</code> such that it depends on another variable <code class="language-plaintext highlighter-rouge">y</code>. If the value of <code class="language-plaintext highlighter-rouge">y</code> is 1, <code class="language-plaintext highlighter-rouge">x</code> will be 2, if <code class="language-plaintext highlighter-rouge">y</code> is 3,
<code class="language-plaintext highlighter-rouge">x</code> will be <code class="language-plaintext highlighter-rouge">100</code> and so on.</p>

<p>Similarly, consider the <code class="language-plaintext highlighter-rouge">customer entity</code> and you are transferring data from the source application to the destination application. 
Suppose, you want the value of the <code class="language-plaintext highlighter-rouge">country</code> field from the source schema to be mapped with the same field of the destination schema. 
However, you want to setup such that, if the country is <code class="language-plaintext highlighter-rouge">USA</code> in the source, in the destination it is 1. 
But if it is <code class="language-plaintext highlighter-rouge">India</code>, at the destination it will be <code class="language-plaintext highlighter-rouge">2</code>. In such a case, we deploy <code class="language-plaintext highlighter-rouge">choose-when</code> mapping.</p>

<p>The generalised structure of the <code class="language-plaintext highlighter-rouge">choose-when</code> condition is:</p>

<p>[choose]</p>

<p>[when] ( = = (condition))</p>

<p>17</p>

<p>[endwhen]</p>

<p>[otherwise]</p>

<p>13</p>

<p>[endotherwise]</p>

<p>[endchoose]</p>

<p><strong>4. Function Mapping</strong> -</p>

<p>Prerequisite: Knowledge about <a href="/transformation/using-library-methods/">AppResource functions</a>.</p>

<ul>
  <li>AppResource functions can be deployed for facilitating the required data transformation between the source and destination application.</li>
  <li>To use AppResource functions you only require to know the fields/variable you desire to map along with the name of the function.</li>
  <li>To understand the utility of these functions let us look at the example below.
Suppose when developing a particular touchpoint, you come to learn that, destination application accepts date time in a different from 
what is sent by the source application. Let the accepted date time format be like ‚Äúyyyy/MM/dd HH:mm:ss‚Äù and received format be like ‚Äúdd-MM-yyyy‚Äù. To get around this dilemma, we use AppResource functions.</li>
</ul>

<p>Refer this <a href="https://www.youtube.com/watch?v=mwcLjXwu6fQ&amp;t=0s&amp;index=5&amp;list=PLSZUUcH5fP9_msXnLwdGp0Mb4Bu0i0g-y">link</a> to know in details about functional mapping.</p>

<p><strong>5. Query Mapping</strong> - As the name suggests, Direct Query mapping is actually running a query in the source schema so as to store the resultant data from the query in the destination field.
For example, when we run a SQL query we provide the name of the field whose result we require,the name of the table from where the data is to be fetched and the parameters, on the basis of which the results would be filtered.</p>

<p>Structure of an SQL query is: select <code class="language-plaintext highlighter-rouge">name</code> from <code class="language-plaintext highlighter-rouge">student</code> where <code class="language-plaintext highlighter-rouge">rollno</code> = 1.
<code class="language-plaintext highlighter-rouge">Name</code> is the output field, <code class="language-plaintext highlighter-rouge">student</code> is the schema and <code class="language-plaintext highlighter-rouge">rollno</code> is the parameter whose value we are checking to filter the data.
We use a similar format when we wish to fetch data from the source or destination schema in APPSeCONNECT. 
We provide the name of the desired field, the schema and the parameters in the query.</p>

<p>The native AppResource function that we use for this purpose is ‚Äòsourcelib‚Äô or ‚Äòdestinationlib‚Äô depending on from where we wish to receive the data.
<code class="language-plaintext highlighter-rouge">Structure of a query in mapping is</code>
destinationlib:GetUniqueId(‚Äú,‚Äù,‚Äù,‚Äù) where we provide the required field the schema and the parameters in order.</p>

<p><strong>6. Variable Mapping</strong> - Click <a href="/transformation/defining-variables-and-functions/">Variable Mapping</a> to know in details.</p>

<p><strong>7. LookUp Mapping</strong> - Click <a href="/transformation/using-lookups-for-value-exchange/">Lookups Mapping</a> to know in details</p>

:ET