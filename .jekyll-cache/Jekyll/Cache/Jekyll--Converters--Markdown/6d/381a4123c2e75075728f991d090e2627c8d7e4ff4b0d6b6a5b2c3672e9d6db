I"$<p><strong>Pascal Case and CamelCase</strong></p>

<p>Pascal Casing - First character of all words are Upper Case and other characters are lower case.
Example: BackColor
Camel Casing - First character of all words, except the first word, are Upper Case and other characters are lower case.
Example: backColor</p>

<p><strong>Classes</strong></p>

<ul>
  <li>Class Names should follow the Pascal Casing</li>
  <li>Class Names should be meaningful and complete. Abbreviations should be avoided
    <ul>
      <li>Good: Licensing, TallyDataImport</li>
      <li>Bad: Lic, tlydtimport, tallydataimport</li>
    </ul>
  </li>
  <li>Classes should be grouped and created in folders according to function</li>
  <li>Classes should only expose methods and members which are required to be accessed from outside the class.</li>
</ul>

<p><strong>Methods</strong></p>
<ul>
  <li>Method Names should follow Pascal Casing</li>
  <li>Method Name should be meaningful and complete. Abbreviations should be avoided
    <ul>
      <li>Good: GetLicense, ReturnDataTable</li>
      <li>Bad: getlic, retdt</li>
    </ul>
  </li>
  <li>Method name should denote what it does, e.g. GetClientLicenseKey, ExecuteDeleteQuery</li>
  <li>Methods should be explained with comments wherever possible</li>
  <li>Methods should not generally have more than 25 lines of code. If longer, consider breaking it into smaller methods</li>
  <li>A method should do only one job. Multiple jobs should be broken into multiple methods.</li>
  <li>The event handler should not contain the code to perform the required action. Rather call another method from the event handler</li>
  <li>Do not use try-catch blocks for control flow. Instead use if else with return.</li>
</ul>

<p><strong>Variables</strong></p>
<ul>
  <li>Variable Names should follow Camel Casing</li>
  <li>Variable Names should be meaningful and complete. Abbreviations should be avoided
    <ul>
      <li>Good: licenseKey, currentDate</li>
      <li>Bad: lickey, curdt</li>
    </ul>
  </li>
  <li>Do not use underscores (_) for local variable names.</li>
  <li>All member variables must be prefixed with underscore (_) so that they can be identified from other local variables</li>
</ul>

<p><strong>Spacing and Indentation</strong></p>
<ul>
  <li>Use TAB for indentation. Do not use SPACES. Define the Tab size as 4</li>
  <li>Comments should be at the same level as the code (use the same level of indentation)</li>
  <li>Curly braces ( {} ) should be at the same level as the code outside the braces</li>
  <li>Use one blank line to separate logical groups of code</li>
  <li>There should be one and only one single blank line between each method inside the class</li>
  <li>The curly braces should be on a separate line and not in the same line as if, for etc. UI Elements</li>
  <li>No UI element should have the default name, e.g. textBox1, panel1, etc. Give each UI element a meaningful name, e.g. txtDistributorName, pnlDatabaseSettings, etc.</li>
  <li>Elements in a form should be left aligned with equal spacing. As far as possible, maintain right alignment as well. Top, bottom, right and left margins should be generally uniform.</li>
</ul>

<p><strong>Programming Practices</strong></p>

<ul>
  <li>Do not hardcode numbers. Use constants instead. Declare constant at the top of the file and use it in your code or use the constants in the config file or database so that you can change it later. Declare them as constants only if you are sure this value will never need to be changed.</li>
  <li>Never access the database from the UI pages. Always have a data layer class which performs all the database related tasks. This will help you support or migrate to another database backend easily.</li>
  <li>Convert strings to the lowercase or upper case before comparing. This will ensure the string will match even if the string being compared has a different case. This may not be followed for strings such as passwords, license keys, etc.</li>
  <li>Avoid using member variables. Declare local variables wherever necessary and pass it to other methods instead of sharing a member variable between methods. If you share a member variable between methods, it will be difficult to track which method changed the value and when.</li>
  <li>If the required configuration file is not found, the application should be able to create one with default values.</li>
  <li>If a wrong value found in the configuration file, the application should throw an error or give a message and also should tell the user what are the correct values.</li>
  <li>Error messages should help the user to solve the problem. Never give error messages like ‚ÄúError in Application‚Äù, ‚ÄúThere is an error‚Äù etc. Instead, give specific messages like ‚ÄúFailed to update the database. Please make sure the login id and password are correct.‚Äù</li>
  <li>When displaying error messages, in addition to telling what is wrong, the message should also tell what should the user do to solve the problem. Instead of message like ‚ÄúFailed to update database.‚Äù, suggest what should the user do: ‚ÄúFailed to update the database. Please make sure the login id and password are correct.‚Äù</li>
</ul>

<p><strong>Exception Handling</strong></p>

<ul>
  <li>Use try-catch in your data layer to catch all database exceptions. This exception handler should record all exceptions from the database. The details recorded should include the name of the command being executed, stored proc name, parameters, connection string used etc. After recording the exception, it could be rethrown so that another layer in the application can catch it and take appropriate action.</li>
  <li>Do not write very large try-catch blocks. If required, write separate try-catch for each task you perform and enclose only the specific piece of code inside the try-catch. This will help you find which piece of code generated the exception and you can give the specific error message to the user.</li>
  <li>Never do a ‚Äòcatch exception and do nothing‚Äô. If you hide an exception, you will never know if the exception happened or not. A lot of developers uses this handy method to ignore non-significant errors. You should always try to avoid exceptions by checking all the error conditions programmatically. In any case, catching an exception and doing nothing is not allowed. In the worst case, you should log the exception and proceed.</li>
  <li>In case of exceptions, give a friendly message to the user, but log the actual error with all possible details about the error, including the time it occurred, method and class name etc.</li>
  <li>Do not write try-catch in all your methods. Use it only if there is a possibility that a specific exception may occur and it cannot be prevented by any other means. For example, if you want to insert a record if it does not already exist in the database, you should try to select the record using the key. Some developers try to insert a record without checking if it already exists. If an exception occurs, they will assume that the record already exists. This is strictly not allowed. You should always explicitly check for errors rather than waiting for exceptions to occur. On the other hand, you should always use exception handlers while you communicate with external systems like network, hardware devices etc. Such systems are subject to failure anytime and error checking is not usually reliable. In those cases, you should use exception handlers and try to recover from an error.</li>
</ul>

<p><strong>Database</strong></p>

<ul>
  <li>All database connections in code should be handled through the DB class. The DB class should have generic methods for connection, disconnection, execution of insert, update, delete queries, returning DataTables, returning DataSets, etc.</li>
  <li>SQL queries should be defined in a separate class per functional module. The methods in the class should have parameters which are required for the creation of the query. The UI classes should not contain any SQL Query constructs. This would help in managing changes in case of database migration and database structure changes.</li>
  <li>No queries should have ‚ÄúSelect *‚Äù. Instead, use the column names. If required, use the Query Designer in SQL Server Management Studio to generate query statements.</li>
  <li>Do not access DataTables using the column indexes. The indexes might change if a new field is inserted. Access columns by the fieldname, e.g. dataTable1.Fields(‚ÄúDistributorID‚Äù) instead of dataTable1.Fields(0)</li>
  <li>While modifying or deleting a record check for the constraints before execution of the update of delete statement. This may be done at the database level through triggers and the appropriate exception being caught in the code.</li>
  <li>Define meaningful table and column names. Do not use short forms. Use the Pascal Casing</li>
  <li>Define meaningful Stored Procedure, Function, Trigger, Index, etc. names. Do not use short forms. Use the Pascal Casing</li>
  <li>Define Foreign Key relationships while creating the database structure. It will help in ensuring that invalid data does not get into the database. Use triggers and constraints where foreign key constraints are not possible</li>
  <li>Use functions in SQL Server instead of using complex queries in code. This will improve performance and also help in making changes. Writing queries also become easier.</li>
</ul>

:ET